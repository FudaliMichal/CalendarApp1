@page "/Weather"
@using CalendarApp1.Models
@using CalendarApp1.Services

<PageTitle>Weather</PageTitle>

<h1>Weather in Wroclaw</h1>


@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <div class="mb-3">
        <DateInput TValue="DateOnly" Value="_startDate" ValueExpression="() => _startDate" ValueChanged="(value) => DateChanged(value)" />
    </div>
    
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Day of week</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach (var forecast in _forecasts)
            {

                if (forecast.Date.ToString() != "01/01/0001")
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.Date.DayOfWeek.ToString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }

                else
                {
                    <tr>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@inject WeatherForecastService ForecastService;
@code
{
    private List<WeatherForecast>? _forecasts;
     
    private DateOnly _startDate = DateOnly.FromDateTime(DateTime.Today);

    /// <summary>
    /// Get forecast of the next 7 days when page loaded. 
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        return GetForecastAsync();
    }

    /// <summary>
    /// Get new set of forecasts when date was changed. 
    /// </summary>
    private async Task DateChanged(DateOnly dateOnly)
    {
        if (dateOnly == _startDate)
        {
            return;
        }
        
        _startDate = dateOnly;

        await GetForecastAsync();
    }

    /// <summary>
    /// Get forecasts for the next 7 days from startDate.s
    /// </summary>
    private async Task GetForecastAsync()
    {
        var forecastsTasks = new List<Task<WeatherForecast>>();
        
        for (var i = 0; i < 7; i++)
        {
            forecastsTasks.Add(ForecastService.GetForecastAsync(_startDate.AddDays(i)));
        }

        var forecasts = await Task.WhenAll(forecastsTasks);
        
        _forecasts = forecasts.OrderBy(f => f.Date)
            .ToList();
    }
}
