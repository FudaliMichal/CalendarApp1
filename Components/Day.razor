@using CalendarApp1.Models
@using CalendarApp1.Data
@using CalendarApp1.Services

@namespace CalendarApp1.Components

<div class="cell" style="@cellStyle" @onclick="Callback">@DayModel.DateOnly.Day
    
    @if (DayModel.EventsList.Count > 3)
    {
        <div>
            see more events
        </div>
    }
    
    @foreach (var e in DayModel.EventsList.Take(3))
    {
        <h6>
            @e.EventName - @e.EventInfo
        </h6>
    }
    
    
</div>

<Modal @ref="modal" Title="@title">
    <BodyTemplate>
        <p>
            Event title:
            <InputText ValueExpression="() => text" ValueChanged="(value) => text=value"></InputText>
        </p>

        <p>
            Event contents:
            <InputTextArea ValueExpression="() => message" ValueChanged="(value) => message=value"></InputTextArea>
        </p>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="Callback1">Create Event</Button>
    </FooterTemplate>
</Modal>

@inject CalendarDbService CDbService

@code {
    [Parameter, EditorRequired]
    public DayModel DayModel { get; set; }

    private string text;
    private string message;
    
    private Modal modal = default!;

    string title = string.Empty;

    string cellStyle => DayModel.DateOnly.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday
        ? "background-color: lightblue;"
        : string.Empty;

    private async Task OnShowModalClick()
    {
        title = $"Create an event for {DayModel.DateOnly}";
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    
    private async Task Callback()
    {
        await OnShowModalClick();
    }

    private async Task Callback1()
    {
        await CDbService.EventCreateAsync(DayModel.DateOnly.ToDateTime(TimeOnly.MinValue), text, message);
        
        DayModel.EventsList.Add(new EventModel(DayModel.DateOnly.ToDateTime(TimeOnly.MinValue))
        {
            EventName = text,
            EventInfo = message
        });
        
        await modal.HideAsync();
        StateHasChanged();
    }

}