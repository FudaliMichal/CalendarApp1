@using CalendarApp1.Models
@using CalendarApp1.Data
@using CalendarApp1.Services

@namespace CalendarApp1.Components

<div class="cell" style="@cellStyle" @onclick="ShowEventModalCallback">@DayModel.DateOnly.Day

    
    @foreach (var e in DayModel.EventsList.Take(2))
    {
        <div class="event" @onclick:stopPropagation="true" @onclick="OnShowOffcanvasClick">@e.Date.TimeOfDay - @e.EventName</div>
    }
    
    @if (DayModel.EventsList.Count > 2)
    {
        <div class="event" @onclick:stopPropagation="true" @onclick="OnShowOffcanvasClick">*Click to see more*</div>
    }
    
</div>

<Offcanvas @ref="offcanvas">
    <BodyTemplate>
        <h3>@offcanvasTitle</h3>
        
        @foreach (var e in DayModel.EventsList)
        {
            <div class="event">@e.Date.TimeOfDay @e.EventName - @e.EventInfo</div>
        }
        
    </BodyTemplate>
</Offcanvas>

<Modal @ref="modal" Title="@modalTitle">
    <BodyTemplate>
        
        Event time:
        <p>
            <TimeInput TValue="TimeOnly" @bind-Value="@time"/>
        </p>

        Event title:
        <p>
            <InputText ValueExpression="() => text" ValueChanged="(value) => text = value"></InputText>
        </p>

        Event contents:
        <p>
            <InputTextArea ValueExpression="() => message" ValueChanged="(value) => message = value"></InputTextArea>
        </p>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="CreateEventCallback">Create Event</Button>
    </FooterTemplate>
</Modal>

@inject CalendarDbService CDbService

@code {
    [Parameter, EditorRequired]
    public DayModel DayModel { get; set; }
    
    TimeOnly time;
    private string text = String.Empty;
    private string message = String.Empty;
    
    private Modal modal = default!;
    private Offcanvas offcanvas = default!;

    string modalTitle = string.Empty;
    string offcanvasTitle = string.Empty;

    string cellStyle => DayModel.DateOnly.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday
        ? "background-color: lightblue;"
        : string.Empty;

    private async Task OnShowModalClick()
    {
        modalTitle = $"Create an event for {DayModel.DateOnly}";
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    
    private async Task ShowEventModalCallback()
    {
        await OnShowModalClick();
    }

    private async Task CreateEventCallback()
    {
        await CDbService.EventCreateAsync(DayModel.DateOnly.ToDateTime(time), text, message);

        DayModel.EventsList.Add(new EventModel(DayModel.DateOnly.ToDateTime(time))
        {
            EventName = text,
            EventInfo = message
        });
        
        await modal.HideAsync();
        StateHasChanged();
    }

    private async Task OnShowOffcanvasClick()
    {
        offcanvasTitle = $"Events of {DayModel.DateOnly}:";
        // StateHasChanged();
        await offcanvas.ShowAsync();
        
    } 

}