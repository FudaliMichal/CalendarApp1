@using CalendarApp1.Models
@using CalendarApp1.Services

@namespace CalendarApp1.Components

<div class="cell" style="@cellStyle" @onclick="ShowEventModalCallback">@DayModel.DateOnly.Day

    
    @foreach (var e in DayModel.EventsList.Take(2))
    {
        <div class="event" @onclick:stopPropagation="true" @onclick="OnShowOffcanvasClick">@e.Date.TimeOfDay - @e.EventName</div>
    }
    
    @if (DayModel.EventsList.Count > 2)
    {
        <div class="eventblue" @onclick:stopPropagation="true" @onclick="OnShowOffcanvasClick">Click to see more</div>
    }
    
</div>

<Offcanvas @ref="_offcanvas">
    <BodyTemplate>
        <h3>@_offcanvasTitle</h3>
        
        @foreach (var e in DayModel.EventsList)
        {
            <div class="eventoff">@e.Date.TimeOfDay @e.EventName - @e.EventInfo
                <Dropdown>
                    <DropdownToggleButton></DropdownToggleButton>
                    <DropdownMenu>
                        @* <DropdownItem To="#" Type="ButtonType.Link" @onclick="() => OnShowEditModalClick(e)">Edit</DropdownItem> *@
                        <DropdownItem To="#" Type="ButtonType.Link" @onclick="() => DeleteEventCallback(e)">Delete</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        }
        
    </BodyTemplate>
</Offcanvas>


<Modal @ref="_modal" Title="@_modalTitle">
    <BodyTemplate>
        
        Event time:
        <p>
            <TimeInput TValue="TimeOnly" @bind-Value="@_time"/>
        </p>

        Event title:
        <p>
            <InputText ValueExpression="() => _text" ValueChanged="(value) => _text = value"></InputText>
        </p>

        Event contents:
        <p>
            <InputTextArea ValueExpression="() => _message" ValueChanged="(value) => _message = value"></InputTextArea>
        </p>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="CreateEventCallback">Create Event</Button>
    </FooterTemplate>
</Modal>


<Modal @ref="_editModal" Title="@_editModalTitle"/>


@inject CalendarDbService CDbService
@inject ToastService ToastService
@code {
    
    [Parameter, EditorRequired]
    public DayModel? DayModel { get; set; }
    
    private Modal _modal = default!;
    private string _modalTitle = string.Empty;
    private TimeOnly _time;
    private string _text = String.Empty;
    private string _message = String.Empty;
    
    private Modal _editModal = default!;
    private string _editModalTitle = string.Empty;
    private TimeOnly _newtime;
    private string _newtext = String.Empty;
    private string _newmessage = String.Empty;
    
    private Offcanvas _offcanvas = default!;
    private string _offcanvasTitle = string.Empty;
    

    string cellStyle => DayModel.DateOnly.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday
        ? "background-color: lightblue;"
        : string.Empty;

    private async Task OnShowModalClick()
    {
        _modalTitle = $"Create an event for {DayModel.DateOnly}";
        await _modal.ShowAsync();
    }
    
    private async Task OnShowEditModalClick(EventModel _event)
    {
        _editModalTitle = $"Edit event";

        var parameters = new Dictionary<string, object>
        {
            { "newtime", _newtime },
            { "newtext", _newtext },
            { "newmessage", _newmessage },
            { "_event", _event },
            {"HideEditModal", EventCallback.Factory.Create(this, OnHideEditModalClick)},
            {"SaveChanges", EventCallback.Factory.Create<EventModel>(this, EditEventCallback)}
        };

        await _editModal.ShowAsync<EditModal>(title: "Edit event:", parameters: parameters);
    }
    
    private async Task ShowEventModalCallback()
    {
        await OnShowModalClick();
    }
    
    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
        ToastService.Notify(new ToastMessage(ToastType.Danger, "Event creation was cancelled."));
    }

    private async Task OnHideEditModalClick()
    {
        await _editModal.HideAsync();
    }
    
    private async Task CreateEventCallback()
    {
        await CDbService.EventCreateAsync(DayModel.DateOnly.ToDateTime(_time), _text, _message);

        DayModel.EventsList.Add(new EventModel(DayModel.DateOnly.ToDateTime(_time))
        {
            EventName = _text,
            EventInfo = _message
        });
        
        await _modal.HideAsync();
        ToastService.Notify(new(ToastType.Success, "Successfully added an event."));
        StateHasChanged();
    }

    private async Task OnShowOffcanvasClick()
    {
        _offcanvasTitle = $"Events of {DayModel.DateOnly}:";
        await _offcanvas.ShowAsync();
        
    }

    private async Task DeleteEventCallback(EventModel e)
    {
        DayModel.EventsList.Remove(e);
        await CDbService.DeleteEventAsync(e);
        ToastService.Notify(new ToastMessage(ToastType.Warning, "Deleted event."));
    }

    private async Task EditEventCallback(EventModel _event)
    {
        await CDbService.EditEventAsync(_event, _newtext, _newmessage, DayModel.DateOnly.ToDateTime(_newtime));
        await OnHideEditModalClick();
    }

}
